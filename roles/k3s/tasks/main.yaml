---
- name: Check K3s version
  ansible.builtin.command: /usr/local/bin/k3s --version
  ignore_errors: true
  changed_when: false
  register: k3s
  become: true
  # Run normally even in check mode.
  check_mode: false

- name: Set k3s_present fact
  ansible.builtin.set_fact:
    k3s_present: '{{ (not k3s.failed) and k3s.stdout | regex_search(k3s_version | regex_escape()) }}'

- name: Include K3s setup
  ansible.builtin.include_tasks: setup.yaml
  when: (not k3s_present) and (not ansible_check_mode)

# Use assert to verify K3s is present when running in check mode.
- name: Assert K3s is present
  ansible.builtin.assert:
    that:
      - k3s_present

- name: Slurp K3s configuration
  ansible.builtin.slurp:
    src: /etc/rancher/k3s/k3s.yaml
  register: k3s_config_base64
  become: true
  when: not ansible_check_mode

- name: Decode K3s config
  ansible.builtin.set_fact:
    k3s_config: '{{ k3s_config_base64.content | b64decode }}'
  when: not ansible_check_mode

- name: Replace Kubeconfig server address
  ansible.builtin.set_fact:
    k3s_config: '{{ k3s_config | replace("127.0.0.1", ansible_default_ipv4.address) }}'
  when: not ansible_check_mode

- name: Kubeconfig folder is present
  ansible.builtin.file:
    name: ./secrets
    state: directory
    mode: '700'
  delegate_to: localhost
  become: false
  when: not ansible_check_mode

- name: Write Kubeconfig
  ansible.builtin.copy:
    dest: ./secrets/k3s.{{ ansible_default_ipv4.address }}.yaml
    content: '{{ k3s_config }}'
    mode: '600'
  delegate_to: localhost
  become: false
  when: not ansible_check_mode
