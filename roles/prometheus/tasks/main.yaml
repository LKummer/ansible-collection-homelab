---
- name: Add Grafana Helm repository
  community.kubernetes.helm_repository:
    name: grafana
    repo_url: https://grafana.github.io/helm-charts
    binary_path: /usr/local/bin/helm

- name: Deploy Loki stack Helm chart
  community.kubernetes.helm:
    name: loki
    chart_ref: grafana/loki-stack
    chart_version: '{{ loki_stack_version }}'
    release_namespace: prometheus
    create_namespace: true
    binary_path: /usr/local/bin/helm
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    update_repo_cache: true
    values:
      loki:
        persistence:
          enabled: true

- name: Add Prometheus community Helm repository
  community.kubernetes.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts
    binary_path: /usr/local/bin/helm

  # IMPORTANT NOTE
  # Deleting the namespace this chart is in does not delete all resources, new
  # installation will fail.
  # Delete webhooks manually:
  # $ kubectl delete validatingwebhookconfiguration/prometheus-kube-prometheus-admission
  # $ kubectl delete mutatingwebhookconfiguration/prometheus-kube-prometheus-admission
  # See https://github.com/prometheus-community/helm-charts/issues/108#issuecomment-703266597
- name: Deploy Prometheus Operator Helm chart
  community.kubernetes.helm:
    name: prometheus
    chart_ref: prometheus-community/kube-prometheus-stack
    chart_version: '{{ kube_prometheus_stack_version }}'
    release_namespace: prometheus
    binary_path: /usr/local/bin/helm
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    update_repo_cache: true
    values:
      # Disabled because we are using K3s without etcd.
      kubeEtcd:
        enabled: false

      # Disabled to avoid crashing node exporter on K3s.
      nodeExporter:
        enabled: false
      
      prometheus:
        prometheusSpec:
          storageSpec:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 10Gi
                volumeMode: Filesystem
                accessModes:
                  - ReadWriteOnce

      grafana:
        adminUser: "{{ grafana_user }}"
        adminPassword: "{{ grafana_password }}"

        persistence:
          enabled: true

        ingress:
          enabled: true

          annotations:
            cert-manager.io/cluster-issuer: letsencrypt
          
          hosts:
            - '{{ grafana_host }}'
          
          tls:
            - secretName: grafana-tls
              hosts:
                - '{{ grafana_host }}'

  register: prometheus_operator

- name: Wait for Prometheus Operator CRDs
  wait_for:
    timeout: 30
  when: prometheus_operator.changed
